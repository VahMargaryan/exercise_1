<?php

declare(strict_types=1);

/**
 * @file
 * Provides an event entity type.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function event_theme(): array {
  return [
    'event' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for event templates.
 *
 * Default template: event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the event information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_event(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function event_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish events.
      $storage = Drupal::entityTypeManager()->getStorage('event');
      $event_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($event_ids) as $event) {
        $event->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize events.
      $storage = Drupal::entityTypeManager()->getStorage('event');
      $event_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($event_ids) as $event) {
        $event->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function event_user_predelete(UserInterface $account): void {
  // Delete events that belong to this account.
  $storage = Drupal::entityTypeManager()->getStorage('event');
  $event_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($event_ids)
  );
}

function event_fetch_artists() {
  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('event')->getPath();
  $full_path = DRUPAL_ROOT . '/' . $path . '/artists.json';
  $data = file_get_contents($full_path);
  $json_data = json_decode($data, TRUE);

  $options = [];
  if (is_array($json_data)) {
    foreach ($json_data as $key => $value) {
      $options[$key] = $value['name'];
    }
  }

  return $options;
}

/**
 * Implements hook_form_alter().
 */
function event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'event_edit_form' || $form_id == 'event_form') {
//    $form['field_event_website_target'] = [
//      '#type' => 'select',
//      '#title' => t('Link Target'),
//      '#weight' => 4,
//      '#options' => [
//        '_self' => t('Same window'),
//        '_blank' => t('New window'),
//      ],
//      '#default_value' => '_self',
//    ];
  }
}
